1) First, a user makes an unauthenticated request to the resource (/private) for which it is not authorized.

2) Spring Securityâ€™s FilterSecurityInterceptor indicates that the unauthenticated request is Denied by throwing an AccessDeniedException.

3) Since the user is not authenticated, ExceptionTranslationFilter initiates Start Authentication and sends a redirect to the login page with
the configured AuthenticationEntryPoint. In most cases, the AuthenticationEntryPoint is an instance of LoginUrlAuthenticationEntryPoint.

4) The browser requests the login page to which it was redirected.

5)Something within the application, must render the login page

6) When the user submits their username and password, the UsernamePasswordAuthenticationFilter creates a UsernamePasswordAuthenticationToken,
which is a type of Authentication, by extracting the username and password from the HttpServletRequest instance.

7) Next, the UsernamePasswordAuthenticationToken is passed into the AuthenticationManager instance to be authenticated.
The details of what AuthenticationManager looks like depend on how the user information is stored.
